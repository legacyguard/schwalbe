name: CI Guardrails

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Scan for secrets
        run: |
          # Check for common secret patterns
          if grep -r "RESEND_API_KEY\|STRIPE_SECRET_KEY\|SUPABASE_SERVICE_ROLE_KEY" --include="*.ts" --include="*.js" --include="*.json" --exclude-dir=node_modules .; then
            echo "‚ùå SECRETS DETECTED: Found potential secrets in code!"
            exit 1
          fi
          echo "‚úÖ No secrets detected in code"

      - name: Check for Sentry imports
        run: |
          # Fail if any code references Sentry packages (ADR-002)
          if grep -r "@sentry\|sentry" --include="*.ts" --include="*.js" --include="*.json" --exclude-dir=node_modules .; then
            echo "‚ùå SENTRY IMPORTS DETECTED: Found Sentry references in code! Use error_log table instead."
            exit 1
          fi
          echo "‚úÖ No Sentry imports detected"

      - name: Check for plaintext search logging
        run: |
          # Check for potential plaintext search term logging
          if grep -r "console\.log.*search\|logger.*search\|log.*searchTerm" --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "‚ùå PLAINTEXT SEARCH LOGGING DETECTED: Found potential search term logging!"
            echo "Use hashed search terms only for privacy compliance."
            exit 1
          fi
          echo "‚úÖ No plaintext search logging detected"

  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint all workspaces
        run: |
          # Lint each workspace that has lint script
          for workspace in apps/web apps/mobile packages/shared packages/logic packages/ui; do
            if [ -f "$workspace/package.json" ] && npm run --silent --workspace="$workspace" lint --if-present; then
              echo "‚úÖ Lint passed for $workspace"
            else
              echo "‚ùå Lint failed for $workspace"
              exit 1
            fi
          done

      - name: Type check all workspaces
        run: |
          # Type check each workspace that has typecheck script
          for workspace in apps/web apps/mobile packages/shared packages/logic packages/ui; do
            if [ -f "$workspace/package.json" ] && npm run --silent --workspace="$workspace" typecheck --if-present; then
              echo "‚úÖ Type check passed for $workspace"
            else
              echo "‚ùå Type check failed for $workspace"
              exit 1
            fi
          done

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          # Run tests for each workspace that has test script
          for workspace in apps/web packages/shared packages/logic; do
            if [ -f "$workspace/package.json" ] && npm run --silent --workspace="$workspace" test --if-present; then
              echo "‚úÖ Tests passed for $workspace"
            else
              echo "‚ùå Tests failed for $workspace"
              exit 1
            fi
          done

  supabase-tests:
    name: Supabase SQL Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: supabase/postgres:15.8.0.47
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: |
          supabase start --db-url postgresql://postgres:postgres@localhost:5432/postgres

      - name: Run migration tests
        run: |
          # Apply all migrations
          supabase db push --db-url postgresql://postgres:postgres@localhost:5432/postgres
          
          # Run SQL smoke tests
          for test_file in supabase/tests/*.sql; do
            if [ -f "$test_file" ]; then
              echo "Running test: $test_file"
              if psql postgresql://postgres:postgres@localhost:5432/postgres -f "$test_file"; then
                echo "‚úÖ Test passed: $test_file"
              else
                echo "‚ùå Test failed: $test_file"
                exit 1
              fi
            fi
          done

      - name: Test alert system
        run: |
          # Test alert system specifically
          psql postgresql://postgres:postgres@localhost:5432/postgres -f supabase/tests/alert_system_smoke.sql
          echo "‚úÖ Alert system tests passed"

  i18n-matrix-check:
    name: i18n Matrix Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run i18n matrix health check
        run: |
          npx tsx scripts/i18n-health-check.ts

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: |
          # Build packages in dependency order
          npm run build --workspace=packages/shared
          npm run build --workspace=packages/logic
          npm run build --workspace=packages/ui
          echo "‚úÖ All packages built successfully"

      - name: Build web app
        run: |
          # Note: This may fail until Next.js migration is complete (Phase 8)
          if npm run build --workspace=apps/web; then
            echo "‚úÖ Web app build succeeded"
          else
            echo "‚ö†Ô∏è Web app build failed - expected until Phase 8 (Next.js migration)"
            # Don't fail CI for this until migration is complete
          fi

  playwright-smoke:
    name: Playwright Smoke Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright smoke tests
        run: |
          # Run basic smoke tests
          if [ -f "apps/web/playwright.config.ts" ]; then
            npm run test:e2e --workspace=apps/web
            echo "‚úÖ Playwright smoke tests passed"
          else
            echo "‚ö†Ô∏è Playwright tests not configured yet"
          fi
        env:
          CI: true

  qa-gates:
    name: QA Gates Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run QA Gate 1 - Accessibility & i18n
        run: npm run qa:accessibility

      - name: Run QA Gate 2 - Privacy & Security
        run: npm run qa:security

      - name: Run QA Gate 3 - Alerts & Observability
        run: npm run qa:alerts

      - name: QA Gates Summary
        run: |
          echo "‚úÖ All QA Gates passed!"
          echo ""
          echo "üéØ Gate 1: Accessibility & i18n compliance verified"
          echo "üîí Gate 2: Privacy & Security compliance verified"
          echo "üìä Gate 3: Alerts & Observability compliance verified"

  status-check:
    name: All Checks Status
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-typecheck, unit-tests, supabase-tests, i18n-matrix-check, build-check, qa-gates]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "‚ùå Security scan failed"
            exit 1
          fi
          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ]; then
            echo "‚ùå Lint and type check failed"
            exit 1
          fi
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          if [ "${{ needs.supabase-tests.result }}" != "success" ]; then
            echo "‚ùå Supabase tests failed"
            exit 1
          fi
          if [ "${{ needs.i18n-matrix-check.result }}" != "success" ]; then
            echo "‚ùå i18n matrix check failed"
            exit 1
          fi
          if [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "‚ùå Build check failed"
            exit 1
          fi
          if [ "${{ needs.qa-gates.result }}" != "success" ]; then
            echo "‚ùå QA Gates failed"
            exit 1
          fi
          
          echo "‚úÖ All CI guardrails passed!"
          echo ""
          echo "üîí Security: No secrets or Sentry imports detected"
          echo "üîç Code Quality: Lint and type checks passed"
          echo "üß™ Tests: Unit and SQL tests passed"
          echo "üåç i18n: Matrix validation passed"
          echo "üèóÔ∏è Build: All packages built successfully"
          echo "üéØ QA Gates: All 3 gates passed (Accessibility, Security, Observability)"