name: Deployment Pipeline

on:
  push:
    branches: [main, develop]
  workflow_run:
    workflows: ["CI Guardrails"]
    types:
      - completed
    branches: [main, develop]

env:
  NODE_VERSION: '20.19.1'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event.workflow_run.conclusion == 'success'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:packages

      - name: Build web application
        run: npm run build --workspace=@schwalbe/web

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Run post-deploy smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Run basic health check
          curl -f https://schwalbe-staging.vercel.app/health || echo "Health check failed"

      - name: Notify staging deployment
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ Staging deployment successful for Schwalbe"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:packages

      - name: Build web application
        run: NODE_OPTIONS=--max-old-space-size=8192 npm run build --workspace=@schwalbe/web

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Run post-deploy monitoring
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run comprehensive health checks
          npm run qa:alerts
          npm run salt:monitor:alerts
          npm run observability:dashboard:prod

      - name: Notify production deployment
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"âœ… Production deployment successful for Schwalbe - All systems operational"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Monitoring
  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Performance report
        run: |
          echo "Performance monitoring completed"
          # Could add custom performance metrics here

  # Rollback Capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Checkout previous stable version
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.rollback_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:packages

      - name: Build web application
        run: NODE_OPTIONS=--max-old-space-size=8192 npm run build --workspace=@schwalbe/web

      - name: Deploy rollback to Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Notify rollback
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸ”„ Emergency rollback completed for Schwalbe to ref: ${{ github.event.inputs.rollback_ref }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}