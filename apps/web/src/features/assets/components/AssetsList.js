import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, useState } from 'react';
import { Link } from 'react-router-dom';
import { useAssets, useDeleteAsset } from '../state/useAssets';
export function AssetsList() {
    const { assets, loading, error } = useAssets();
    const { deleteAsset } = useDeleteAsset();
    const [q, setQ] = useState('');
    const [category, setCategory] = useState('');
    const filtered = useMemo(() => {
        return assets.filter(a => {
            const matchesText = q ? (a.name?.toLowerCase().includes(q.toLowerCase()) || a.notes?.toLowerCase().includes(q.toLowerCase())) : true;
            const matchesCategory = category ? a.category === category : true;
            return matchesText && matchesCategory;
        });
    }, [assets, q, category]);
    return (_jsxs("div", { className: "p-6 text-white", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx("h1", { className: "text-2xl font-semibold", children: "Assets" }), _jsx(Link, { "aria-label": "Create new asset", className: "underline text-emerald-300", to: "/assets/new", children: "New Asset" })] }), _jsxs("div", { className: "flex gap-3 mb-4", children: [_jsx("label", { className: "sr-only", htmlFor: "search", children: "Search" }), _jsx("input", { id: "search", className: "bg-zinc-900 text-white rounded px-3 py-2 w-64", placeholder: "Search assets...", value: q, onChange: e => setQ(e.target.value) }), _jsx("label", { className: "sr-only", htmlFor: "category", children: "Category" }), _jsxs("select", { id: "category", className: "bg-zinc-900 text-white rounded px-3 py-2", value: category, onChange: e => setCategory(e.target.value), children: [_jsx("option", { value: "", children: "All categories" }), _jsx("option", { value: "property", children: "Property" }), _jsx("option", { value: "vehicle", children: "Vehicle" }), _jsx("option", { value: "financial", children: "Financial" }), _jsx("option", { value: "business", children: "Business" }), _jsx("option", { value: "personal", children: "Personal" })] })] }), error && _jsx("div", { role: "alert", className: "text-red-300 mb-3", children: String(error) }), loading ? (_jsx("div", { "aria-busy": "true", "aria-live": "polite", children: "Loading..." })) : (_jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "min-w-full text-sm", children: [_jsx("thead", { children: _jsxs("tr", { className: "text-left text-zinc-400", children: [_jsx("th", { className: "p-2", children: "Name" }), _jsx("th", { className: "p-2", children: "Category" }), _jsx("th", { className: "p-2", children: "Value" }), _jsx("th", { className: "p-2", children: "Acquired" }), _jsx("th", { className: "p-2", children: "Actions" })] }) }), _jsxs("tbody", { children: [filtered.map(a => (_jsxs("tr", { className: "border-t border-zinc-800", children: [_jsx("td", { className: "p-2", children: a.name }), _jsx("td", { className: "p-2 capitalize", children: a.category }), _jsx("td", { className: "p-2", children: a.estimated_value ? a.estimated_value.toLocaleString(undefined, { style: 'currency', currency: a.currency || 'USD' }) : '—' }), _jsx("td", { className: "p-2", children: a.acquired_at ? new Date(a.acquired_at).toLocaleDateString() : '—' }), _jsxs("td", { className: "p-2", children: [_jsx(Link, { className: "underline text-sky-300 mr-3", to: `/assets/${a.id}/edit`, children: "Edit" }), _jsx("button", { className: "underline text-red-300", onClick: () => deleteAsset(a.id), "aria-label": `Delete asset ${a.name}`, children: "Delete" })] })] }, a.id))), filtered.length === 0 && (_jsx("tr", { children: _jsx("td", { className: "p-4 text-zinc-400", colSpan: 5, children: "No assets found." }) }))] })] }) }))] }));
}
