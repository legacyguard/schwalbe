openapi: 3.1.0
info:
  title: LegacyGuard API
  description: |
    LegacyGuard API provides comprehensive endpoints for managing family legacy documents, 
    wills, emergency access, and secure document storage. The API uses JWT authentication 
    via Clerk and supports 34+ languages across 40 jurisdictions.
  version: 1.0.0
  contact:
    name: LegacyGuard Support
    email: support@legacyguard.com
    url: https://legacyguard.com/support
  license:
    name: Proprietary
    url: https://legacyguard.com/legal/api-license

servers:
  - url: https://api.legacyguard.com/v1
    description: Production server
  - url: https://staging-api.legacyguard.com/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Development server

security:
  - ClerkAuth: []

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Documents
    description: Document management and storage
  - name: Family
    description: Family member and guardian management
  - name: Will
    description: Will creation and management
  - name: Emergency
    description: Emergency access and notifications
  - name: Vault
    description: Secure vault operations
  - name: AI
    description: Sofia AI assistant endpoints
  - name: OCR
    description: Document OCR and processing

paths:
  /auth/session:
    get:
      tags:
        - Authentication
      summary: Get current session
      description: Returns the current user session with permissions and metadata
      operationId: getCurrentSession
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/verify-2fa:
    post:
      tags:
        - Authentication
      summary: Verify 2FA code
      description: Verifies the two-factor authentication code
      operationId: verify2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  pattern: '^[0-9]{6}$'
                  example: '123456'
              required:
                - code
      responses:
        '200':
          description: 2FA verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  accessToken:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /documents:
    get:
      tags:
        - Documents
      summary: List documents
      description: Returns a paginated list of user documents with optional filtering
      operationId: listDocuments
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/DocumentCategory'
        - name: search
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, date, size, type]
            default: date
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Documents
      summary: Upload document
      description: Uploads a new document with encryption and OCR processing
      operationId: uploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                category:
                  $ref: '#/components/schemas/DocumentCategory'
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                encrypted:
                  type: boolean
                  default: true
              required:
                - file
                - category
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Get document
      description: Retrieves a specific document by ID
      operationId: getDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Documents
      summary: Update document
      description: Updates document metadata and properties
      operationId: updateDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  $ref: '#/components/schemas/DocumentCategory'
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Documents
      summary: Delete document
      description: Permanently deletes a document
      operationId: deleteDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{documentId}/share:
    post:
      tags:
        - Documents
      summary: Share document
      description: Shares a document with specified recipients
      operationId: shareDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipients:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      permissions:
                        type: array
                        items:
                          type: string
                          enum: [view, download, edit]
                expiresAt:
                  type: string
                  format: date-time
                message:
                  type: string
              required:
                - recipients
      responses:
        '200':
          description: Document shared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  shareId:
                    type: string
                  shareUrl:
                    type: string
                    format: uri

  /family/members:
    get:
      tags:
        - Family
      summary: List family members
      description: Returns all family members and their relationships
      operationId: listFamilyMembers
      responses:
        '200':
          description: Family members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'

    post:
      tags:
        - Family
      summary: Add family member
      description: Adds a new family member
      operationId: addFamilyMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyMemberInput'
      responses:
        '201':
          description: Family member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyMember'

  /family/guardians:
    get:
      tags:
        - Family
      summary: List guardians
      description: Returns all designated guardians
      operationId: listGuardians
      responses:
        '200':
          description: Guardians retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guardian'

    post:
      tags:
        - Family
      summary: Add guardian
      description: Designates a new guardian
      operationId: addGuardian
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardianInput'
      responses:
        '201':
          description: Guardian added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guardian'

  /will:
    get:
      tags:
        - Will
      summary: Get will
      description: Retrieves the user's will document
      operationId: getWill
      responses:
        '200':
          description: Will retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Will'
        '404':
          description: Will not found

    post:
      tags:
        - Will
      summary: Create will
      description: Creates a new will document
      operationId: createWill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WillInput'
      responses:
        '201':
          description: Will created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Will'

    put:
      tags:
        - Will
      summary: Update will
      description: Updates an existing will
      operationId: updateWill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WillInput'
      responses:
        '200':
          description: Will updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Will'

  /emergency/access-request:
    post:
      tags:
        - Emergency
      summary: Request emergency access
      description: Creates an emergency access request
      operationId: requestEmergencyAccess
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                urgency:
                  type: string
                  enum: [low, medium, high, critical]
                requestedAccess:
                  type: array
                  items:
                    type: string
                    enum: [documents, medical, financial, all]
                duration:
                  type: integer
                  description: Access duration in milliseconds
              required:
                - reason
                - urgency
                - requestedAccess
      responses:
        '201':
          description: Access request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyAccessRequest'

  /emergency/notifications/test:
    post:
      tags:
        - Emergency
      summary: Test emergency notifications
      description: Sends test emergency notifications to guardians
      operationId: testEmergencyNotifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [email, sms, push, all]
                guardianIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Test notifications sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent:
                    type: integer
                  failed:
                    type: integer
                  details:
                    type: array
                    items:
                      type: object

  /vault/items:
    get:
      tags:
        - Vault
      summary: List vault items
      description: Returns all items stored in the secure vault
      operationId: listVaultItems
      responses:
        '200':
          description: Vault items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaultItem'

    post:
      tags:
        - Vault
      summary: Add vault item
      description: Stores a new item in the secure vault
      operationId: addVaultItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaultItemInput'
      responses:
        '201':
          description: Item added to vault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItem'

  /ai/chat:
    post:
      tags:
        - AI
      summary: Chat with Sofia AI
      description: Sends a message to Sofia AI assistant
      operationId: chatWithSofia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                context:
                  type: object
                  properties:
                    documentId:
                      type: string
                    category:
                      type: string
                language:
                  type: string
                  default: en
              required:
                - message
      responses:
        '200':
          description: AI response generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  suggestions:
                    type: array
                    items:
                      type: string
                  confidence:
                    type: number
                    minimum: 0
                    maximum: 1

  /ocr/process:
    post:
      tags:
        - OCR
      summary: Process document with OCR
      description: Extracts text from a document using OCR
      operationId: processOCR
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                language:
                  type: string
                  default: en
                enhanceQuality:
                  type: boolean
                  default: true
              required:
                - file
      responses:
        '200':
          description: OCR processing complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                  confidence:
                    type: number
                  language:
                    type: string
                  metadata:
                    type: object

components:
  securitySchemes:
    ClerkAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Clerk authentication

  schemas:
    Session:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        permissions:
          type: array
          items:
            type: string
        jurisdiction:
          type: string
        language:
          type: string
        createdAt:
          type: string
          format: date-time

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        category:
          $ref: '#/components/schemas/DocumentCategory'
        size:
          type: integer
        mimeType:
          type: string
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
        encrypted:
          type: boolean
        ocrProcessed:
          type: boolean
        ocrText:
          type: string
        metadata:
          type: object
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DocumentCategory:
      type: string
      enum:
        - personal
        - legal
        - financial
        - medical
        - property
        - insurance
        - tax
        - education
        - employment
        - other

    FamilyMember:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        relationship:
          type: string
          enum: [spouse, child, parent, sibling, grandparent, grandchild, other]
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object
        emergencyContact:
          type: boolean

    FamilyMemberInput:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        relationship:
          type: string
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
          format: email
        phone:
          type: string
      required:
        - firstName
        - lastName
        - relationship

    Guardian:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        relationship:
          type: string
        permissions:
          type: array
          items:
            type: string
        notificationPreferences:
          type: object
          properties:
            email:
              type: boolean
            sms:
              type: boolean
            push:
              type: boolean

    GuardianInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        relationship:
          type: string
        permissions:
          type: array
          items:
            type: string
      required:
        - name
        - email

    Will:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [draft, review, finalized, notarized]
        executor:
          type: object
        beneficiaries:
          type: array
          items:
            type: object
        assets:
          type: array
          items:
            type: object
        specialInstructions:
          type: string
        witnesses:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time

    WillInput:
      type: object
      properties:
        executor:
          type: object
        beneficiaries:
          type: array
          items:
            type: object
        assets:
          type: array
          items:
            type: object
        specialInstructions:
          type: string

    EmergencyAccessRequest:
      type: object
      properties:
        id:
          type: string
        guardianId:
          type: string
        reason:
          type: string
        urgency:
          type: string
        status:
          type: string
          enum: [pending, approved, denied, expired]
        requestedAccess:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    VaultItem:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [password, note, card, identity, crypto]
        name:
          type: string
        encrypted:
          type: boolean
        data:
          type: object
        createdAt:
          type: string
          format: date-time
        lastAccessed:
          type: string
          format: date-time

    VaultItemInput:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        data:
          type: object
      required:
        - type
        - name
        - data

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        requestId:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: BAD_REQUEST
              message: Invalid request parameters
              details:
                field: email
                reason: Invalid email format

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: UNAUTHORIZED
              message: Authentication required

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: FORBIDDEN
              message: Insufficient permissions

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: NOT_FOUND
              message: Resource not found

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: INTERNAL_ERROR
              message: An unexpected error occurred
