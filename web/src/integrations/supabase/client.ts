
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { useAuth } from '@clerk/clerk-react';

// Get Supabase configuration from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error(
    'Missing Supabase environment variables. Please check your .env.local file.'
  );
}

// Base Supabase client (without user Authorization header). Useful for SSR-safe fallbacks.
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  {
    auth: {
      // SSR-safe: only use localStorage in browser environment
      storage: typeof window !== 'undefined' ? window.localStorage : undefined,
      // Enable only in the browser to avoid SSR touching storage/timers
      persistSession: typeof window !== 'undefined',
      autoRefreshToken: typeof window !== 'undefined',
    },
    // Enable real-time subscriptions
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  }
);

// Export for convenience
export default supabase;

// Hook that returns a factory for a Supabase client bound to the current Clerk user via JWT
// Requires a Clerk JWT template named "supabase" to be configured in Clerk.
export const useSupabaseWithClerk = () => {
  const { getToken } = useAuth();

  const createAuthedClient = async () => {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      throw new Error(
        'Supabase configuration is missing. Please check your environment variables.'
      );
    }

    try {
      const token = await getToken({ template: 'supabase' }).catch(() => null);

      // Create a fresh client instance with the Authorization header if token exists
      return createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
        auth: {
          storage:
            typeof window !== 'undefined' ? window.localStorage : undefined,
          persistSession: typeof window !== 'undefined',
          autoRefreshToken: typeof window !== 'undefined',
        },
        global: {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
        },
        realtime: {
          params: { eventsPerSecond: 10 },
        },
      });
    } catch (error) {
      console.error('Error creating Supabase client with Clerk token:', error);
      return supabase; // fallback (no Authorization header)
    }
  };

  return createAuthedClient;
};
