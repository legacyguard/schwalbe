/**
 * Real Insights Service
 * Complete database integration for insights generation and management
 */

import { supabase } from '@/integrations/supabase/client';
import type {
  DocumentAnalysis,
  FamilyImpactStatement,
  InsightAnalytics,
  InsightFilters,
  QuickInsight,
} from '@/types/insights';

class RealInsightsService {
  private static instance: RealInsightsService;

  static getInstance(): RealInsightsService {
    if (!RealInsightsService.instance) {
      RealInsightsService.instance = new RealInsightsService();
    }
    return RealInsightsService.instance;
  }

  // Core Insights Generation
  async analyzeDocument(
    documentId: string,
    userId: string
  ): Promise<DocumentAnalysis> {
    try {
      // Get document data from database
      const { data: document, error } = await supabase
        .from('documents')
        .select('*')
        .eq('id', documentId)
        .eq('user_id', userId)
        .single();

      if (error) throw error;
      if (!document) throw new Error('Document not found');

      // Perform comprehensive analysis
      const extractedValue = await this.extractDocumentValue(document);
      const insights = await this.generateDocumentInsights(
        document,
        extractedValue
      );
      const recommendations = await this.generateRecommendations(
        document,
        extractedValue
      );

      // Store all insights in database
      const storedInsights = await this.storeMultipleInsights([
        ...insights.immediate,
        ...insights.potential,
      ]);

      return {
        documentId,
        documentType: document.type,
        extractedValue,
        insights: {
          immediate: storedInsights.filter(i =>
            insights.immediate.some(orig => orig.title === i.title)
          ),
          potential: storedInsights.filter(i =>
            insights.potential.some(orig => orig.title === i.title)
          ),
        },
        recommendations,
      };
    } catch (_error) {
      console.error('Document analysis failed:', _error);
      throw _error;
    }
  }

  async generateFamilyImpactStatement(
    userId: string
  ): Promise<FamilyImpactStatement> {
    try {
      // Get user's documents and family members
      const [documentsResult, familyResult] = await Promise.all([
        supabase.from('documents').select('*').eq('user_id', userId),
        this.getFamilyMembers(userId),
      ]);

      const documents = documentsResult.data || [];
      const familyMembers = familyResult;

      // Analyze protection gaps and scenarios
      const protectionGaps = await this.analyzeProtectionGaps(
        documents,
        familyMembers
      );
      const affectedMembers = await this.analyzeAffectedMembers(
        familyMembers,
        documents
      );
      const protectionLevel = this.calculateProtectionLevel(
        documents,
        familyMembers
      );
      const timeSaved = this.calculateTimeSaved(documents);

      const statement: FamilyImpactStatement = {
        userId,
        scenario: this.generateScenario(documents.length, familyMembers.length),
        impactDescription: this.generateImpactDescription(
          protectionLevel,
          familyMembers.length
        ),
        affectedMembers,
        protectionGaps,
        overallProtectionLevel: protectionLevel,
        estimatedTimeSaved: timeSaved,
        emotionalBenefits: this.generateEmotionalBenefits(
          protectionLevel,
          familyMembers.length
        ),
        generatedAt: new Date().toISOString(),
      };

      // Store the statement
      await this.storeFamilyImpactStatement(statement);

      return statement;
    } catch (_error) {
      console.error('Failed to generate family impact statement:', _error);
      throw _error;
    }
  }

  // Database Operations
  async getQuickInsights(
    userId: string,
    filters?: InsightFilters
  ): Promise<{ data: QuickInsight[]; total: number }> {
    try {
      let query = supabase
        .from('quick_insights')
        .select('*', { count: 'exact' })
        .eq('user_id', userId);

      if (filters?.types?.length) {
        query = query.in('type', filters.types);
      }

      if (filters?.impact?.length) {
        query = query.in('impact', filters.impact);
      }

      if (filters?.priority?.length) {
        query = query.in('priority', filters.priority);
      }

      if (filters?.actionable !== undefined) {
        query = query.eq('actionable', filters.actionable);
      }

      if (filters?.documentIds?.length) {
        query = query.in('document_id', filters.documentIds);
      }

      if (filters?.timeRange) {
        query = query
          .gte('created_at', filters.timeRange.start)
          .lte('created_at', filters.timeRange.end);
      }

      const { data, error, count } = await query.order('created_at', {
        ascending: false,
      });

      if (error) throw error;

      return {
        data: data || [],
        total: count || 0,
      };
    } catch (error) {
      console.error('Failed to fetch insights:', error);
      return { data: [], total: 0 };
    }
  }

  async storeInsight(
    insight: Omit<QuickInsight, 'createdAt' | 'id' | 'updatedAt'>
  ): Promise<QuickInsight> {
    try {
      const { data, error } = await supabase
        .from('quick_insights')
        .insert({
          user_id: insight.userId,
          document_id: insight.documentId,
          type: insight.type,
          title: insight.title,
          description: insight.description,
          value: insight.value,
          impact: insight.impact,
          priority: insight.priority,
          actionable: insight.actionable,
          action_text: insight.actionText,
          action_url: insight.actionUrl,
          metadata: insight.metadata,
          family_impact: insight.familyImpact || null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        })
        .select()
        .single();

      if (error) throw error;

      return {
        id: data.id,
        userId: data.user_id,
        documentId: data.document_id,
        type: data.type,
        title: data.title,
        description: data.description,
        value: data.value,
        impact: data.impact,
        priority: data.priority,
        actionable: data.actionable,
        actionText: data.action_text,
        actionUrl: data.action_url,
        metadata: data.metadata,
        familyImpact: data.family_impact,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };
    } catch (error) {
      console.error('Failed to store insight:', error);
      throw error;
    }
  }

  async storeMultipleInsights(
    insights: Omit<QuickInsight, 'createdAt' | 'id' | 'updatedAt'>[]
  ): Promise<QuickInsight[]> {
    try {
      const insightData = insights.map(insight => ({
        user_id: insight.userId,
        document_id: insight.documentId,
        type: insight.type,
        title: insight.title,
        description: insight.description,
        value: insight.value,
        impact: insight.impact,
        priority: insight.priority,
        actionable: insight.actionable,
        action_text: insight.actionText,
        action_url: insight.actionUrl,
        metadata: insight.metadata,
        family_impact: insight.familyImpact || null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }));

      const { data, error } = await supabase
        .from('quick_insights')
        .insert(insightData)
        .select();

      if (error) throw error;

      return (data || []).map(item => ({
        id: item.id,
        userId: item.user_id,
        documentId: item.document_id,
        type: item.type,
        title: item.title,
        description: item.description,
        value: item.value,
        impact: item.impact,
        priority: item.priority,
        actionable: item.actionable,
        actionText: item.action_text,
        actionUrl: item.action_url,
        metadata: item.metadata,
        familyImpact: item.family_impact,
        createdAt: item.created_at,
        updatedAt: item.updated_at,
      }));
    } catch (error) {
      console.error('Failed to store multiple insights:', error);
      throw error;
    }
  }

  async updateInsight(
    insightId: string,
    updates: Partial<QuickInsight>
  ): Promise<QuickInsight> {
    try {
      const updateData: any = {
        updated_at: new Date().toISOString(),
      };

      if (updates.title) updateData.title = updates.title;
      if (updates.description) updateData.description = updates.description;
      if (updates.value) updateData.value = updates.value;
      if (updates.impact) updateData.impact = updates.impact;
      if (updates.priority) updateData.priority = updates.priority;
      if (updates.actionable !== undefined)
        updateData.actionable = updates.actionable;
      if (updates.actionText) updateData.action_text = updates.actionText;
      if (updates.actionUrl) updateData.action_url = updates.actionUrl;
      if (updates.metadata) updateData.metadata = updates.metadata;
      if (updates.familyImpact) updateData.family_impact = updates.familyImpact;

      const { data, error } = await supabase
        .from('quick_insights')
        .update(updateData)
        .eq('id', insightId)
        .select()
        .single();

      if (error) throw error;

      return {
        id: data.id,
        userId: data.user_id,
        documentId: data.document_id,
        type: data.type,
        title: data.title,
        description: data.description,
        value: data.value,
        impact: data.impact,
        priority: data.priority,
        actionable: data.actionable,
        actionText: data.action_text,
        actionUrl: data.action_url,
        metadata: data.metadata,
        familyImpact: data.family_impact,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };
    } catch (error) {
      console.error('Failed to update insight:', error);
      throw error;
    }
  }

  async deleteInsight(insightId: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('quick_insights')
        .delete()
        .eq('id', insightId);

      if (error) throw error;
    } catch (error) {
      console.error('Failed to delete insight:', error);
      throw error;
    }
  }

  async getInsightAnalytics(
    userId: string,
    timeframe: { end: string; start: string }
  ): Promise<InsightAnalytics> {
    try {
      // Get insights within timeframe
      const { data: insights, error } = await supabase
        .from('quick_insights')
        .select('*')
        .eq('user_id', userId)
        .gte('created_at', timeframe.start)
        .lte('created_at', timeframe.end);

      if (error) throw error;

      const allInsights = insights || [];
      const actionableInsights = allInsights.filter(i => i.actionable);

      // Calculate protection levels from documents
      const { data: documents } = await supabase
        .from('documents')
        .select('*')
        .eq('user_id', userId);

      const protectionLevel = this.calculateProtectionLevel(
        documents || [],
        []
      );

      // Group insights by category
      const categoryMap = new Map<string, number>();
      allInsights.forEach(insight => {
        const category = insight.metadata?.category || 'General';
        categoryMap.set(category, (categoryMap.get(category) || 0) + 1);
      });

      const topCategories = Array.from(categoryMap.entries())
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5)
        .map(([category, count]) => ({
          category,
          count,
          averageImpact: this.calculateAverageImpact(
            allInsights.filter(i => i.metadata?.category === category)
          ),
        }));

      // Generate trend data (simplified)
      const trendData = this.generateTrendData(allInsights, timeframe);

      return {
        totalInsights: allInsights.length,
        actionableInsights: actionableInsights.length,
        completedActions: 0, // Would need to track this separately
        averageProtectionLevel: protectionLevel,
        totalTimeSaved: this.calculateTotalTimeSaved(allInsights),
        topCategories,
        trendData,
      };
    } catch (error) {
      console.error('Failed to get insight analytics:', error);
      return {
        totalInsights: 0,
        actionableInsights: 0,
        completedActions: 0,
        averageProtectionLevel: 0,
        totalTimeSaved: 0,
        topCategories: [],
        trendData: [],
      };
    }
  }

  // Real Analysis Methods
  private async extractDocumentValue(document: any) {
    const keyInfo = [];
    const missingInfo = [];
    const qualityScore = 75;
    let completenessPercentage = 80;

    // Analyze document based on type
    switch (document.type) {
      case 'will':
        keyInfo.push('Beneficiaries identified', 'Executor appointed');
        if (!document.title.includes('executor')) {
          missingInfo.push('Executor details may be incomplete');
          completenessPercentage -= 10;
        }
        break;
      case 'insurance':
        keyInfo.push('Policy details', 'Coverage amount');
        if (!document.title.includes('policy')) {
          missingInfo.push('Policy number may be missing');
          completenessPercentage -= 15;
        }
        break;
      default:
        keyInfo.push('Document uploaded', 'Basic information captured');
    }

    return {
      keyInfo,
      missingInfo,
      qualityScore,
      completenessPercentage,
    };
  }

  private async generateDocumentInsights(document: any, extractedValue: any) {
    const immediate: Omit<QuickInsight, 'createdAt' | 'id' | 'updatedAt'>[] =
      [];
    const potential: Omit<QuickInsight, 'createdAt' | 'id' | 'updatedAt'>[] =
      [];

    // Time saved insight
    immediate.push({
      userId: document.user_id,
      documentId: document.id,
      type: 'time_saved',
      title: 'Time Saved',
      description: `Uploading this ${document.type} saves your family approximately 2.5 hours of document searching`,
      value: '2.5 hours saved',
      impact: 'medium',
      priority: 'important',
      actionable: false,
      metadata: {
        calculatedAt: new Date().toISOString(),
        confidence: 0.8,
        category: 'efficiency',
        tags: ['time-saving', 'organization'],
      },
    });

    // Protection level insight
    immediate.push({
      userId: document.user_id,
      documentId: document.id,
      type: 'protection_level',
      title: 'Protection Level Increased',
      description: `Your family protection level increased by 15% with this ${document.type}`,
      value: '+15% protection',
      impact: 'high',
      priority: 'important',
      actionable: false,
      metadata: {
        calculatedAt: new Date().toISOString(),
        confidence: 0.9,
        category: 'protection',
        tags: ['security', 'family-protection'],
      },
    });

    // Document analysis insight
    if (extractedValue.missingInfo.length > 0) {
      potential.push({
        userId: document.user_id,
        documentId: document.id,
        type: 'completion_gap',
        title: 'Document Completion Opportunity',
        description: `This ${document.type} could be enhanced by addressing ${extractedValue.missingInfo.length} missing elements`,
        value: `${extractedValue.completenessPercentage}% complete`,
        impact: 'medium',
        priority: 'nice_to_have',
        actionable: true,
        actionText: 'Review and complete',
        actionUrl: `/vault/${document.id}/edit`,
        metadata: {
          calculatedAt: new Date().toISOString(),
          confidence: 0.7,
          category: 'document-quality',
          tags: ['completeness', 'improvement'],
        },
      });
    }

    return { immediate, potential };
  }

  private async generateRecommendations(document: any, extractedValue: any) {
    const recommendations = [];

    if (extractedValue.missingInfo.length > 0) {
      recommendations.push({
        priority: 'medium' as const,
        action: 'Complete missing information',
        reason: `${extractedValue.missingInfo.length} fields could be enhanced`,
        impact: 'Improved document completeness and legal validity',
      });
    }

    if (extractedValue.qualityScore < 90) {
      recommendations.push({
        priority: 'low' as const,
        action: 'Consider professional review',
        reason: 'Document quality could be enhanced',
        impact: 'Professional validation and optimization',
      });
    }

    return recommendations;
  }

  // Helper Methods
  private async getFamilyMembers(userId: string) {
    try {
      const { data } = await supabase
        .from('family_members')
        .select('*')
        .eq('family_owner_id', userId)
        .eq('is_active', true);

      return data || [];
    } catch (_error) {
      console.warn('Family members table not available, using fallback');
      return [];
    }
  }

  private calculateProtectionLevel(
    documents: any[],
    familyMembers: any[]
  ): number {
    const documentScore = Math.min(100, documents.length * 15);
    const familyScore = Math.min(100, familyMembers.length * 10);
    return Math.round((documentScore + familyScore) / 2);
  }

  private calculateTimeSaved(documents: any[]): number {
    return documents.length * 2.5; // 2.5 hours per document
  }

  private calculateTotalTimeSaved(insights: any[]): number {
    return insights
      .filter(i => i.type === 'time_saved')
      .reduce((total, insight) => {
        const match = insight.value?.match(/(\d+\.?\d*)/);
        return total + (match ? parseFloat(match[1]) : 0);
      }, 0);
  }

  private calculateAverageImpact(insights: any[]): string {
    if (insights.length === 0) return 'none';

    const impactScores = insights.map(i => {
      switch (i.impact) {
        case 'high':
          return 3;
        case 'medium':
          return 2;
        case 'low':
          return 1;
        default:
          return 0;
      }
    });

    const avg =
      impactScores.reduce((sum, score) => sum + score, 0) / insights.length;

    if (avg >= 2.5) return 'high';
    if (avg >= 1.5) return 'medium';
    return 'low';
  }

  private generateTrendData(
    insights: any[],
    timeframe: { end: string; start: string }
  ) {
    // Simplified trend data generation
    const days = Math.ceil(
      (new Date(timeframe.end).getTime() -
        new Date(timeframe.start).getTime()) /
        (1000 * 60 * 60 * 24)
    );
    const trendData = [];

    for (let i = 0; i < Math.min(days, 30); i++) {
      const date = new Date(timeframe.start);
      date.setDate(date.getDate() + i);

      const dayInsights = insights.filter(insight => {
        const insightDate = new Date(insight.created_at);
        return insightDate.toDateString() === date.toDateString();
      });

      trendData.push({
        date: date.toISOString().split('T')[0],
        insightsGenerated: dayInsights.length,
        actionsCompleted: dayInsights.filter(i => i.actionable).length,
        protectionLevel: this.calculateProtectionLevel([], []),
      });
    }

    return trendData;
  }

  private async storeFamilyImpactStatement(
    statement: FamilyImpactStatement
  ): Promise<void> {
    try {
      // Store in a generic insights record since we don't have a specific table
      await this.storeInsight({
        userId: statement.userId,
        type: 'family_impact',
        title: 'Family Impact Analysis',
        description: statement.impactDescription,
        value: `${statement.overallProtectionLevel}% protected`,
        impact:
          statement.overallProtectionLevel > 75
            ? 'high'
            : statement.overallProtectionLevel > 50
              ? 'medium'
              : 'low',
        priority: 'important',
        actionable: statement.protectionGaps.length > 0,
        actionText:
          statement.protectionGaps.length > 0
            ? 'Address protection gaps'
            : undefined,
        metadata: {
          calculatedAt: statement.generatedAt,
          confidence: 0.85,
          category: 'family-protection',
          tags: ['family', 'protection', 'analysis'],
          scenario: statement.scenario,
          affectedMembersCount: statement.affectedMembers.length,
          protectionGapsCount: statement.protectionGaps.length,
          timeSaved: statement.estimatedTimeSaved,
        },
        familyImpact: {
          affectedMembers: statement.affectedMembers.map(m => m.memberId),
          riskReduction: statement.overallProtectionLevel,
          emotionalBenefit: statement.emotionalBenefits.join(', '),
        },
      });
    } catch (error) {
      console.error('Failed to store family impact statement:', error);
    }
  }

  private generateScenario(
    documentCount: number,
    familyMemberCount: number
  ): string {
    if (documentCount === 0) return 'Starting your legacy protection journey';
    if (documentCount < 3) return 'Building your document foundation';
    if (familyMemberCount === 0) return 'Securing your personal legacy';
    return `Protecting ${familyMemberCount} family members with ${documentCount} secured documents`;
  }

  private generateImpactDescription(
    protectionLevel: number,
    familyCount: number
  ): string {
    const familyText =
      familyCount > 0
        ? `your ${familyCount} family members`
        : 'your loved ones';

    if (protectionLevel >= 80) {
      return `Your comprehensive planning provides excellent protection for ${familyText}, giving them clear guidance and secure access to important information.`;
    } else if (protectionLevel >= 60) {
      return `Your current planning provides good protection for ${familyText}, with room for enhancement in a few key areas.`;
    } else if (protectionLevel >= 40) {
      return `Your planning provides basic protection for ${familyText}, but significant improvements would strengthen their security.`;
    } else {
      return `Your planning is in early stages. Building more comprehensive protection will greatly benefit ${familyText}.`;
    }
  }

  private analyzeAffectedMembers(familyMembers: any[], documents: any[]) {
    return familyMembers.map(member => ({
      memberId: member.id,
      name: member.name,
      impact:
        documents.length > 3
          ? 'High security and clear guidance'
          : 'Basic protection established',
      riskLevel:
        documents.length > 3
          ? ('low' as const)
          : documents.length > 1
            ? ('medium' as const)
            : ('high' as const),
    }));
  }

  private async analyzeProtectionGaps(documents: any[], familyMembers: any[]) {
    const gaps = [];

    if (documents.length === 0) {
      gaps.push({
        area: 'Document Foundation',
        risk: 'No secured documents available for family access',
        recommendation: 'Upload your first important document',
        urgency: 'immediate' as const,
      });
    }

    if (!documents.some(d => d.type === 'will')) {
      gaps.push({
        area: 'Will Documentation',
        risk: 'No will document secured for family guidance',
        recommendation: 'Create or upload your will',
        urgency: 'near_term' as const,
      });
    }

    if (familyMembers.length === 0) {
      gaps.push({
        area: 'Family Access',
        risk: 'No family members configured for emergency access',
        recommendation: 'Add trusted family members',
        urgency: 'near_term' as const,
      });
    }

    return gaps;
  }

  private generateEmotionalBenefits(
    protectionLevel: number,
    familyCount: number
  ): string[] {
    const benefits = [];

    if (protectionLevel > 50) {
      benefits.push('Peace of mind knowing your family is protected');
      benefits.push('Reduced stress during difficult times');
    }

    if (familyCount > 0) {
      benefits.push('Clear guidance for your loved ones');
      benefits.push('Preserved family harmony through clear instructions');
    }

    benefits.push('Legacy of care and thoughtfulness');
    benefits.push('Professional organization of important matters');

    return benefits;
  }
}

export const realInsightsService = RealInsightsService.getInstance();
